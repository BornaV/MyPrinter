[gcode_macro START_PRINT]
gcode:
  DO_Z_OFFSET
    # {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    # {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # # Start bed heating
    # M140 S{BED_TEMP}
    # # Use absolute coordinates
    # G90
    # # Reset the G-Code Z offset (adjust Z offset if needed)
    # SET_GCODE_OFFSET Z=0.0
    # # Home the printer
    # G28
    # # Move the nozzle near the bed
    # G1 Z5 F3000
    # # Move the nozzle very close to the bed
    # G1 Z0.15 F300
    # # Wait for bed to reach temperature
    # M190 S{BED_TEMP}
    # # Set and wait for nozzle to reach temperature
    # M109 S{EXTRUDER_TEMP}

# [gcode_macro END_PRINT]
# gcode:
#     # Turn off bed, extruder, and fan
#     M140 S0
#     M104 S0
#     M106 S0
#     # Move nozzle away from print while retracting
#     G91
#     G1 X-2 Y-2 E-3 F300
#     # Raise nozzle by 10mm
#     G1 Z10 F3000
#     G90
#     # Disable steppers
#     M84

[gcode_macro makemesh]
gcode:
  G28
  G1 Z5 F1500
  G92 Z6
  BED_MESH_CALIBRATE
  G1 Z6 F1500
  G92 Z5

[gcode_macro do_z_offset]
gcode:
  {% if printer.toolhead.homed_axes != 'xyz' %}
		G28			#Home All Axes
  {% endif %}
  G1 Z10 F500
  {% if printer.z_tilt.applied != True %}
		Z_TILT_ADJUST # run z tilt
  {% endif %}
  G1 Z10 F500
  AUTO_OFFSET_Z

[delayed_gcode load_mesh]
gcode:
  BED_MESH_PROFILE LOAD="default"

[delayed_gcode set_z_offset]
gcode:
  #SET_GCODE_OFFSET Z_ADJUST=0.75 MOVE=1


#used to search for the available variables
[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
